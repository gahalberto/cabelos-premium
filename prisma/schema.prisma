datasource db {
  provider = "postgresql" // ou "sqlite" se preferir
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String            @id @default(cuid())
  name              String?
  email             String            @unique
  emailVerified     DateTime?
  isVerified        Boolean
  verificationToken String
  image             String?
  password          String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  accounts          Account[]
  sessions          Session[]
  MemoriaProfiles   MemoriaProfiles[]
}

enum Plano {
  Basic
  Premium
}

model MemoriaProfiles {
  id              String            @id @default(uuid())
  slug            String            @unique
  name            String?
  profileImg      String?
  images          String[]
  videoUrl        String?
  birthday        DateTime?
  deathday        DateTime?
  biography       String?
  phrase          String?
  views           Int               @default(0)
  userId          String
  user            User              @relation(fields: [userId], references: [id])
  orders          Order[] // Relação com pedidos
  paymentId       String? // Campo opcional para armazenar o ID do pagamento do Stripe
  plan            Plano             @default(Basic) // Adiciona o campo plan
  isApproved      Boolean           @default(false) // Adiciona o campo isApproved
  created_At      DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ProfilePhotos   ProfilePhotos[]
  ProfileTributes ProfileTributes[]
}

model ProfilePhotos {
  id        Int             @id @default(autoincrement())
  profileId String
  profile   MemoriaProfiles @relation(fields: [profileId], references: [id])
  imageUrl  String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model ProfileTributes {
  id        Int       @id @default(autoincrement())
  profileId String
  name      String
  email     String
  message   String
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  profile MemoriaProfiles @relation(fields: [profileId], references: [id])
}

model Subscription {
  id              Int       @id @default(autoincrement())
  profileId       Int
  plan            Plan // Relaciona a assinatura com o plano (Basic, Silver, Premium)
  active          Boolean   @default(false)
  startDate       DateTime?
  endDate         DateTime?
  qrCodes         Int       @default(0)
  stripeInvoiceId String?   @unique
}

model Order {
  id           Int             @id @default(autoincrement())
  profileId    String // Alterado de Int para String para corresponder ao id da tabela MemoriaProfiles
  profile      MemoriaProfiles @relation(fields: [profileId], references: [id]) // Relacionando com MemoriaProfiles
  products     Product[]
  totalPrice   Float
  status       String // Pending, Paid, Shipped
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  transactions Transaction[] // Relação com a tabela Transaction
  OrderProduct OrderProduct[]
}

model Product {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  description  String
  price        Float
  stock        Int            @default(0)
  orders       Order[]
  OrderProduct OrderProduct[]
}

model OrderProduct {
  orderId   Int
  productId Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@id([orderId, productId])
}

enum Plan {
  Basic
  Silver
  Premium
}

enum TransactionStatus {
  Success
  Failed
}

model Transaction {
  id        Int               @id @default(autoincrement())
  orderId   Int
  order     Order             @relation(fields: [orderId], references: [id])
  amount    Float
  status    TransactionStatus
  createdAt DateTime          @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Views {
  id        Int      @id @default(autoincrement())
  profileId String
  date      DateTime
}

model FinancialReport {
  id          Int      @id @default(autoincrement())
  totalIncome Float    @default(0)
  totalSales  Int      @default(0)
  date        DateTime @default(now())
}

model Contact {
  id        String        @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  status    ContactStatus @default(Pending)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum ContactStatus {
  Pending
  Read
  Responded
}
