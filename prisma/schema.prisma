// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  lastName      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?
  cpf           String?
  cnpj          String?
  birthDate     DateTime?
  gender        Gender?
  password      String?   // Para autenticação com credenciais
  role          UserRole  @default(CLIENTE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  orders   Order[]
  reviews  Review[]
  wishlist WishlistItem[]
  cart     CartItem[]

  @@unique([cpf])
  @@unique([cnpj])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// E-commerce Models
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  price       Float
  salePrice   Float?
  sku         String   @unique
  stock       Int      @default(0)
  images      String[]
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  isNew       Boolean  @default(false)
  length      String?  // comprimento do cabelo
  texture     String?  // textura (liso, ondulado, cacheado)
  color       String?  // cor
  weight      String?  // peso
  origin      String?  // origem do cabelo
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems   OrderItem[]
  reviews      Review[]
  wishlistItems WishlistItem[]
  cartItems    CartItem[]
}

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  status        OrderStatus @default(PENDING)
  total         Float
  subtotal      Float
  shipping      Float       @default(0)
  tax           Float       @default(0)
  discount      Float       @default(0)
  paymentMethod String?
  paymentId     String?
  paymentStatus PaymentStatus @default(PENDING)
  
  // Endereço de entrega
  shippingName     String
  shippingEmail    String
  shippingPhone    String
  shippingAddress  String
  shippingCity     String
  shippingState    String
  shippingZipCode  String
  
  trackingCode  String?
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  items OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
  total     Float
}

model Review {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int      // 1-5 estrelas
  comment   String?
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model WishlistItem {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model CartItem {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

// Enums
enum UserRole {
  CLIENTE
  ESPECIALISTA
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
